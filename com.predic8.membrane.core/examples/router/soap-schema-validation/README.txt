SOAP MESSAGE VALIDATION

With the ValidateSOAPMsgInterceptor you can validate SOAP messages against WSDL definitions and XML schemas.


RUNNING THE EXAMPLE

In this example we will use a demo service ArticleService and call service methods with valid and invalid parameters. 

To run the example execute the following steps:

1. Go to the examples/soap-schema-validation directory.

2. Execute router.bat

3. Execute ant run command in another console window
  
4. Error notification will be displayed: Message validation failed! 
   
5. Go to examples/soap-schema-validation/src directory.

6. Open ArticleClient.java file and set a valid ID for ArticleType:
   uncomment the line with:    aType.setId("EX-123"); 
    
7. Repeat step 3

8. Error notification will not be displayed.      

HOW IT IS DONE

The following part describes the example in detail.  

First take a look at the examples/soap-schema-validation/rules.xml file.

<configuration>
  <rules>
    <forwarding-rule name="predic8.com" port="2000">
      <targetport>8080</targetport>
      <targethost>predic8.com</targethost>
      <interceptors>
        <interceptor id="soapValidator"/>
      </interceptors>
    </forwarding-rule>
  </rules>
</configuration>


The rule forwards calls to the port 2000 to predic8.com:8080. As you can see, the schema validation interceptor is appended to the list of the interceptors of the rule. This interceptor will be invoked for given rule only.  

Next take a look at the bean configuration of the interceptor in the examples/soap-schema-validation/validation-beans.xml file.

  <bean id="soapValidator" class="com.predic8.membrane.core.interceptor.schemavalidation.ValidateSOAPMsgInterceptor" init-method="init">
    <property name="wsdl" value="http://www.predic8.com:8080/material/ArticleService?wsdl" />
  </bean>

For every referenced schemas read from the WSDL definition validators are created and applied to the input. If the schema validation fails, exception is raised and error response will be sent back to the client.

After executing the ant run target web service stubs are generated by wsimport tool, than ArticleClient class is compiled and its main method executed. To manipulate the endpoint address we have to put a property with the URL of the router into the RequestContext. This is is done by following code snippet:

   ((BindingProvider)port).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
    "http://localhost:2000/material/ArticleService");   

We create an ArticleType and set some required properties. According to the schema definition of the ArticleService, ID of the article must be in the following format: \w\w-\d{3}. We intentionally violate the format and set invalid ID to provoke error. As soon as we use valid format for ArticleType ID, interceptor forwards the message to the destination. 


  





