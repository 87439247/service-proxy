SOAP MESSAGE VALIDATION

With the SOAPMessageValidatorInterceptor you can validate SOAP messages against WSDL definitions and XML schemas.


RUNNING THE EXAMPLE

In this example we will use a sample SOAP service named ArticleService. We will call the service's operations with valid and invalid parameters.
A Membrane router placed between client and service will be validating each request and response against an WSDL definition and its referenced XML schemas.

To run the example execute the following steps:

1. Go to the examples/soap-schema-validation directory and run

	\membrane-router-2.0.1\examples\soap-schema-validation> start router.bat
  
  This will startup the router
    
2. Execute

	\membrane-router-2.0.1\examples\soap-schema-validation> ant run
  	
3. An error notification will be displayed: Message validation failed! 
   
4. Go to examples/soap-schema-validation/src directory.

5. Open ArticleClient.java file and set a valid ID for ArticleType:
   uncomment the line with:    aType.setId("EX-12345"); 
    
6. Repeat step 2

7. An error notification will not be displayed.      



HOW IT IS DONE

The following part describes the example in detail.  

First take a look at the examples/soap-schema-validation/rules.xml file.

<configuration>
  <rules>
    <forwarding-rule name="predic8.com" port="2000">
      <targetport>8080</targetport>
      <targethost>predic8.com</targethost>
      <interceptors>
        <soapValidator wsdl="http://www.predic8.com:8080/material/ArticleService?wsdl" />
      </interceptors>
    </forwarding-rule>
  </rules>
</configuration>



The rule forwards the calls to the port 2000 to predic8.com:8080. As you can see, the schema validation interceptor is appended to the list of the interceptors of the rule.  

Next take a closer look at the soapValidator element:

<soapValidator wsdl="http://www.predic8.com:8080/material/ArticleService?wsdl" />

For every schema that is referenced by the WSDL definition the validators are created and applied to the message. If the schema validation fails, an exception is raised and an error response will be sent back to the client.

After executing the ant run target web service stubs are generated by the wsimport tool, then the ArticleClient class is compiled and its main method executed. To manipulate the endpoint address we have to put a property with the URL of the router into the RequestContext. This is is done by the following code snippet:

   ((BindingProvider)port).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
   "http://localhost:2000/material/ArticleService");   

We create an ArticleType and set some required properties. According to the schema definition of the ArticleService, the ID of the article must be in the following format: [A-Z]{2}-\d{5}. We intentionally violate the format and set an invalid ID to provoke an error. As soon as we use a valid format for ArticleType ID, the interceptor forwards the message to the destination. 


  





