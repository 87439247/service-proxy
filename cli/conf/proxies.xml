<!--
	Routing Configuration (for development)
	
	Here you can configure routing rules for Membrane Service Proxy.

	This file is used when directly starting from an IDE only (Eclipse,
	for example).

	Have a look at router/conf/proxies.xml or router/conf/proxies-full-sample.xml or
	http://membrane-soa.org/service-proxy-doc/4.0/configuration/reference/ to be
	inspired on what you can do here. ;)
	
-->
<spring:beans xmlns="http://membrane-soa.org/proxies/1/"
              xmlns:spring="http://www.springframework.org/schema/beans"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
					    http://membrane-soa.org/proxies/1/ http://membrane-soa.org/schemas/proxies-1.xsd">
    <router>
        <!-- Forwards SOAP requests for the BLZService on port 2000 to the Web server on host thomas-bayer.com -->
        <soapProxy port="2000"
                   wsdl="C:\java\apache-cxf-2.7.7\samples\ws_addressing\src\main\resources\hello_world_addr.wsdl">
            <interceptor refid="endpointRewriter"/>

            <!--regExReplacer regex="2020" replace="9990" target="body"/-->

            <response>
                <groovy>
                    import groovy.xml.StreamingMarkupBuilder
                    import groovy.xml.XmlUtil

                    Response.ok().body(
                    XmlUtil.serialize(new StreamingMarkupBuilder().bind() {
                    // mkp.declareNamespace(soap: 'http://www.w3.org/2003/05/soap-envelope')
                    mkp.declareNamespace(soap: 'http://schemas.xmlsoap.org/soap/envelope/')
                    mkp.declareNamespace(wsa: 'http://www.w3.org/2005/08/addressing')
                    soap.Envelope {
                    soap.Header {
                    wsa.MessageID {
                    mkp.yield(UUID.randomUUID())
                    }
                    wsa.RelatesTo {
                    mkp.yield(exc.getProperty('messageId'))
                    }
                    wsa.To {
                    mkp.yield('http://www.w3.org/2005/08/addressing/role/anonymous')
                    }
                    wsa.Action {
                    mkp.yield('https://client/ARI_Asynch_Service/ARI_Asynch_SubmitRequestResponse')
                    }
                    }
                    //soap.Body {
                    // greetMeResponse(xmlns: 'http://apache.org/hello_world_soap_http/types') {
                    // responseType {
                    // mkp.yield('predic81')
                    // }
                    // }
                    //}
                    }
                    })
                    ).build()
                </groovy>
                <log/>
            </response>
        </soapProxy>

        <serviceProxy name="decoupled" port="2020">
            <interceptor refid="decoupledEndpointRewriter"/>
            <log/>
            <!--<request>-->
            <!--<groovy>-->
            <!--import com.predic8.membrane.core.interceptor.ws_addressing.DecoupledEndpointRegistry-->

            <!--println getRouter().geBeanFactory().getBean(DecoupledEndpointRegistry.class).toString()-->
            <!--</groovy>-->
            <!--</request>-->
            <!--<log headerOnly="false"/>-->
            <!--<request>-->
            <!--<regExReplacer regex="RelatesTo xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;>.*?&lt;" replace="RelatesTo xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;>ddd&lt;"/>-->
            <!--</request>-->
            <!--<target host="localhost" port="9990"/>-->
        </serviceProxy>

        <!-- Forwards HTTP requests on port 2001 to a local web container running on port 8080, maybe a Tomcat server. -->
        <serviceProxy name="localhost" port="2001">
            <target host="localhost" port="8080"/>
        </serviceProxy>

        <!-- Sets up the Administration Web Interface on port 9000-->
        <serviceProxy name="Console" port="8000">
            <basicAuthentication>
                <user name="admin" password="membrane"/>
            </basicAuthentication>
            <adminConsole/>
        </serviceProxy>
    </router>

    <spring:bean id="endpointRewriter"
                 class="com.predic8.membrane.core.interceptor.ws_addressing.WsaEndpointRewriterInterceptor">
    </spring:bean>

    <spring:bean id="decoupledEndpointRegistry"
                 class="com.predic8.membrane.core.interceptor.ws_addressing.DecoupledEndpointRegistry">
    </spring:bean>

    <spring:bean id="decoupledEndpointRewriter"
                 class="com.predic8.membrane.core.interceptor.ws_addressing.DecoupledEndpointRewriterInterceptor">
    </spring:bean>
    <!--decoupledEndpointRegistry-->

</spring:beans>