package com.predic8.membrane.annot;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic.Kind;
import javax.tools.FileObject;
import javax.tools.StandardLocation;

@SupportedAnnotationTypes(value = { "com.predic8.membrane.annot.*" })
@SupportedSourceVersion(SourceVersion.RELEASE_6)
public class SpringConfigurationXSDGeneratingAnnotationProcessor extends AbstractProcessor {
	
	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		try {
			if (annotations.size() > 0) { // somehow we get called twice in the javac run from Maven

				Set<? extends Element> mcmains = roundEnv.getElementsAnnotatedWith(MCMain.class);
				if (mcmains.size() == 0) {
					processingEnv.getMessager().printMessage(Kind.WARNING, "@MCMain was nowhere found.");
					return true;
				}
				if (mcmains.size() > 1) {
					for (Element e : mcmains)
						processingEnv.getMessager().printMessage(Kind.ERROR, "@MCMain found in multiple locations.", e);
					return true;
				}
				MCMain mcmain = mcmains.iterator().next().getAnnotation(MCMain.class);

				List<MCInterceptor> mcinterceptors = new ArrayList<MCInterceptor>();
				for (Element e : roundEnv.getElementsAnnotatedWith(MCInterceptor.class))
					mcinterceptors.add(e.getAnnotation(MCInterceptor.class));

				if (mcmains.size() == 0) {
					processingEnv.getMessager().printMessage(Kind.ERROR, "@MCMain but no @MCInterceptor found.", mcmains.iterator().next());
					return true;
				}
				

				writeXSD(roundEnv, mcmain, mcinterceptors);
				writeParsers(roundEnv, mcmain);
				writeParserDefinitior(roundEnv, mcmain, mcinterceptors);
			}

			/*
			for (TypeElement element : annotations) {
				System.err.println(element.getQualifiedName());
				for (Element e : roundEnv.getElementsAnnotatedWith(element))
					System.err.println(" at " + e.getSimpleName());
			}
			*/
			return true;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	private void writeParserDefinitior(RoundEnvironment roundEnv, MCMain mcmain, List<MCInterceptor> mcinterceptors) throws IOException {
		List<Element> sources = new ArrayList<Element>();
		sources.addAll(roundEnv.getElementsAnnotatedWith(MCMain.class));
		sources.addAll(roundEnv.getElementsAnnotatedWith(MCInterceptor.class));
		
		FileObject o = processingEnv.getFiler().createSourceFile(mcmain.outputPackage() + ".NamespaceHandlerAutoGenerated", sources.toArray(new Element[0]));
		BufferedWriter bw = new BufferedWriter(o.openWriter());
		try {
			bw.write("/* Copyright 2012 predic8 GmbH, www.predic8.com\r\n" + 
					"\r\n" + 
					"   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n" + 
					"   you may not use this file except in compliance with the License.\r\n" + 
					"   You may obtain a copy of the License at\r\n" + 
					"\r\n" + 
					"   http://www.apache.org/licenses/LICENSE-2.0\r\n" + 
					"\r\n" + 
					"   Unless required by applicable law or agreed to in writing, software\r\n" + 
					"   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n" + 
					"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n" + 
					"   See the License for the specific language governing permissions and\r\n" + 
					"   limitations under the License. */\r\n" + 
					"\r\n" + 
					"package com.predic8.membrane.core.config.spring;\r\n" + 
					"\r\n" + 
					"public class NamespaceHandlerAutoGenerated {\r\n" + 
					"\r\n" + 
					"	public static void registerBeanDefinitionParsers(NamespaceHandler nh) {\r\n");
			for (MCInterceptor i : mcinterceptors) {
				String parserClassName = javaify(i.name() + "InterceptorParser");
				bw.write("		nh.registerBeanDefinitionParser2(\"" + i.name() + "\", new " + parserClassName + "());\r\n");
			}
			bw.write(
					"	}\r\n" + 
					"}\r\n" + 
					"");
		} finally {
			bw.close();
		}
	}

	private void writeXSD(RoundEnvironment roundEnv, MCMain mcmain, List<MCInterceptor> mcinterceptors) throws IOException {
		List<Element> sources = new ArrayList<Element>();
		sources.addAll(roundEnv.getElementsAnnotatedWith(MCMain.class));
		sources.addAll(roundEnv.getElementsAnnotatedWith(MCInterceptor.class));

		FileObject o = processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,
				mcmain.outputPackage(), mcmain.outputName(), sources.toArray(new Element[0]));
		BufferedWriter bw = new BufferedWriter(o.openWriter());
		try {
			assembleXSD(mcmain, mcinterceptors, bw);
		} finally {
			bw.close();
		}
	}

	private void writeParsers(RoundEnvironment roundEnv, MCMain mcmain) throws IOException {
		for (Element e : roundEnv.getElementsAnnotatedWith(MCInterceptor.class)) {
			MCInterceptor i = e.getAnnotation(MCInterceptor.class);
			
			TypeElement te = (TypeElement)e;
			
			if (i.xsd().length() != 0)
				continue;
			
			List<Element> sources = new ArrayList<Element>();
			sources.addAll(roundEnv.getElementsAnnotatedWith(MCMain.class));
			sources.add(e);
			
			String interceptorClassName = te.getQualifiedName().toString();
			String parserClassName = javaify(i.name() + "InterceptorParser");
			
			FileObject o = processingEnv.getFiler().createSourceFile(mcmain.outputPackage() + "." + parserClassName,
					sources.toArray(new Element[0]));
			BufferedWriter bw = new BufferedWriter(o.openWriter());
			try {
				bw.write("/* Copyright 2012 predic8 GmbH, www.predic8.com\r\n" + 
						"\r\n" + 
						"   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n" + 
						"   you may not use this file except in compliance with the License.\r\n" + 
						"   You may obtain a copy of the License at\r\n" + 
						"\r\n" + 
						"   http://www.apache.org/licenses/LICENSE-2.0\r\n" + 
						"\r\n" + 
						"   Unless required by applicable law or agreed to in writing, software\r\n" + 
						"   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n" + 
						"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n" + 
						"   See the License for the specific language governing permissions and\r\n" + 
						"   limitations under the License. */\r\n" + 
						"\r\n" + 
						"package com.predic8.membrane.core.config.spring;\r\n" + 
						"\r\n" + 
						//"import org.springframework.beans.factory.support.BeanDefinitionBuilder;\r\n" + 
						"import org.w3c.dom.Element;\r\n" + 
						"\r\n" + 
						"public class " + parserClassName + " extends AbstractParser {\r\n" + 
						"\r\n" + 
						"	protected Class<?> getBeanClass(Element element) {\r\n" + 
						"		return " + interceptorClassName + ".class;\r\n" + 
						"	}\r\n" + 
						"}\r\n" + 
						"");
			} finally {
				bw.close();
			}
		}

	}

	private String javaify(String s) {
		StringBuilder sb = new StringBuilder(s);
		sb.replace(0, 1, "" + Character.toUpperCase(s.charAt(0)));
		return sb.toString();
	}
	
	private void assembleXSD(MCMain mcmain, List<MCInterceptor> mcinterceptors, BufferedWriter bw) throws IOException {
		bw.append(
				mcmain.xsd()
				.replace("${interceptorDeclarations}", assembleInterceptorDeclarations(mcinterceptors))
				.replace("${interceptorReferences}", assembleInterceptorReferences(mcinterceptors)));
	}

	private String assembleInterceptorDeclarations(List<MCInterceptor> mcinterceptors) {
		StringWriter interceptorDeclarations = new StringWriter();
		for (MCInterceptor i : mcinterceptors) {
			if (i.xsd().length() == 0) {
				if (i.mixed())
					throw new RuntimeException("@MCInterceptor(..., mixed=true) also requires (..., mixed=true, xsd=\"...\").");
				interceptorDeclarations.append("<xsd:element name=\""+ i.name() + "\" type=\"EmptyElementType\" />\r\n");
			} else {
				interceptorDeclarations.append(
						"<xsd:element name=\""+ i.name() +"\">\r\n" + 
						"	<xsd:complexType>\r\n" + 
						"		<xsd:complexContent " + (i.mixed() ? "mixed=\"true\"" : "") + ">\r\n" + 
						"			<xsd:extension base=\"beans:identifiedType\">\r\n" + 
						i.xsd() +
						"			</xsd:extension>\r\n" + 
						"		</xsd:complexContent>\r\n" + 
						"	</xsd:complexType>\r\n" + 
						"</xsd:element>\r\n");
			}
		}
		return interceptorDeclarations.toString();
	}

	private String assembleInterceptorReferences(List<MCInterceptor> mcinterceptors) {
		StringWriter interceptorReferences = new StringWriter();
		for (MCInterceptor i : mcinterceptors) {
			interceptorReferences.append("<xsd:element ref=\"" + i.name() + "\" />\r\n");
		}
		return interceptorReferences.toString();
	}
}